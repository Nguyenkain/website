<?php

/**
 * This is the model base class for the table "creatures".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Creatures".
 *
 * Columns in table "creatures" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $ID
 * @property string $Viet
 * @property string $Latin
 * @property integer $Loai
 * @property integer $Ho
 * @property integer $Bo
 * @property integer $Nhom
 * @property string $Description
 * @property string $Img
 * @property integer $Author
 * @property string $AuthorName
 *
 */
abstract class BaseCreatures extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'creatures';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Creatures|Creatures', $n);
	}

	public static function representingColumn() {
		return 'Viet';
	}

	public function rules() {
		return array(
				array('Loai, Ho, Bo, Nhom, Author', 'numerical', 'integerOnly'=>true),
				array('Viet, Latin, AuthorName', 'length', 'max'=>50),
				array('Img', 'length', 'max'=>200),
				array('Description', 'safe'),
				array('Viet, Latin, Loai, Ho, Bo, Nhom, Description, Img, Author, AuthorName', 'default', 'setOnEmpty' => true, 'value' => null),
				array('ID, Viet, Latin, Loai, Ho, Bo, Nhom, Description, Img, Author, AuthorName', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
				'rHo' => array(self::BELONGS_TO, 'Ho', 'Ho'),
				'rBo' => array(self::BELONGS_TO, 'Bo', 'Bo'),
				'rNhom' => array(self::BELONGS_TO, 'Nhom', 'Nhom'),
				'rLoai' => array(self::BELONGS_TO, 'Loai', 'Loai'),
				'rAuthor'=>array(self::BELONGS_TO,'Author','Author'),
				'rProvince' => array(self::MANY_MANY, 'Coordinations', 'creatures_provinces_relation(creature_id, province_id)'),
				'rRelation' => array(self::HAS_MANY, 'CreaturesProvincesRelation', 'creature_id'),
		);
	}

	public function behaviors(){
		return array( 'CAdvancedArBehavior' => array(
				'class' => 'application.extensions.CAdvancedArBehavior'));
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
				'ID' => Yii::t('app', 'ID'),
				'Viet' => Yii::t('app', 'Tên Việt'),
				'Latin' => Yii::t('app', 'Tên Latin'),
				'Loai' => Yii::t('app', 'Loài'),
				'Ho' => Yii::t('app', 'Họ'),
				'Bo' => Yii::t('app', 'Bộ'),
				'Nhom' => Yii::t('app', 'Nhóm'),
				'Description' => Yii::t('app', 'Mô tả'),
				'Img' => Yii::t('app', 'Ảnh'),
				'Author' => Yii::t('app', 'Tác giả'),
				'AuthorName' => Yii::t('app', 'Tên tác giả'),
				'rNhom'=>Yii::t('app', 'Nhóm'),
				'rHo'=>Yii::t('app', 'Họ'),
				'rBo'=>Yii::t('app', 'Bộ'),
				'rLoai'=>Yii::t('app', 'Loài'),
				'rRelation'=>Yii::t('app', 'Địa điểm'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
		$sort = new CSort;
		$sort->defaultOrder = 'ID DESC';
		$criteria->compare('ID', $this->ID);
		$criteria->compare('Viet', strtolower($this->Viet), true);
		$criteria->compare('Latin', strtolower($this->Latin), true);
		$criteria->compare('Loai', $this->Loai);
		$criteria->compare('Ho', $this->Ho);
		$criteria->compare('Bo', $this->Bo);
		$criteria->compare('Nhom', $this->Nhom);
		$criteria->compare('Description', $this->Description, true);
		$criteria->compare('Img', $this->Img, true);
		$criteria->compare('Author', $this->Author);
		$criteria->compare('AuthorName', $this->AuthorName, true);

		return new CActiveDataProvider($this, array(
				'criteria'=>$criteria,
				'sort' => $sort,
				'pagination'=>array(
						'pageSize'=>10,
				),
		));
	}
}